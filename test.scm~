(load "interpreter.scm")
(load "functionParser.scm")
(require rackunit)

; Part One Tests ******************************************************

(check-eq? (interpret "tests/1/1.txt") 150)
(check-eq? (interpret "tests/1/2.txt") -4)
(check-eq? (interpret "tests/1/3.txt") 10)
(check-eq? (interpret "tests/1/4.txt") 16)
(check-eq? (interpret "tests/1/5.txt") 220)
(check-eq? (interpret "tests/1/6.txt") 5)
(check-eq? (interpret "tests/1/7.txt") 6)
(check-eq? (interpret "tests/1/8.txt") 10)
(check-eq? (interpret "tests/1/9.txt") 5)
(check-eq? (interpret "tests/1/10.txt") -39)
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/1/11.txt")))
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/1/12.txt")))
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/1/13.txt")))
(check-eq? (interpret "tests/1/15.txt") 'true)
(check-eq? (interpret "tests/1/16.txt") 100)
(check-eq? (interpret "tests/1/17.txt") 'false)
(check-eq? (interpret "tests/1/18.txt") 'true)
(check-eq? (interpret "tests/1/19.txt") 128)
(check-eq? (interpret "tests/1/20.txt") 12)

; Part Two Tests ******************************************************

(check-eq? (interpret "tests/2/1.txt") 20)
(check-eq? (interpret "tests/2/2.txt") 164)
(check-eq? (interpret "tests/2/3.txt") 32)
(check-eq? (interpret "tests/2/4.txt") 2)
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/2/5.txt")))
(check-eq? (interpret "tests/2/6.txt") 25)
(check-eq? (interpret "tests/2/7.txt") 21)
(check-eq? (interpret "tests/2/8.txt") 6)
(check-eq? (interpret "tests/2/9.txt") -1)
(check-eq? (interpret "tests/2/10.txt") 789)
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/2/11.txt")))
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/2/12.txt")))
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/2/13.txt")))
(check-eq? (interpret "tests/2/14.txt") 12)
(check-eq? (interpret "tests/2/15.txt") 125)
(check-eq? (interpret "tests/2/16.txt") 110)
;(check-eq? (interpret "tests/2/17.txt") 2000400)
(check-eq? (interpret "tests/2/18.txt") 101)
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/2/19.txt")))

; Part Three Tests *****************************************************

(check-eq? (interpret "tests/3/1.txt") 10)
(check-eq? (interpret "tests/3/2.txt") 14)
(check-eq? (interpret "tests/3/3.txt") 45)
(check-eq? (interpret "tests/3/4.txt") 55)
(check-eq? (interpret "tests/3/5.txt") 1)
(check-eq? (interpret "tests/3/6.txt") 115)
(check-eq? (interpret "tests/3/7.txt") 'true)
(check-eq? (interpret "tests/3/8.txt") 20)
(check-eq? (interpret "tests/3/9.txt") 24)
(check-eq? (interpret "tests/3/10.txt") 2)
(check-eq? (interpret "tests/3/11.txt") 35)
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/3/12.txt")))
(check-eq? (interpret "tests/3/13.txt") 90)
(check-eq? (interpret "tests/3/14.txt") 69)
(check-eq? (interpret "tests/3/15.txt") 87)
(check-eq? (interpret "tests/3/16.txt") 64)
(check-exn
 exn:fail?
 (lambda ()
   (interpret "tests/3/17.txt")))
(check-eq? (interpret "tests/3/18.txt") 125)
(check-eq? (interpret "tests/3/19.txt") 100)
;(check-eq? (interpret "tests/3/20.txt") 2000400)

(display "All tests completed!")